# Write the logic that lets the player (yourself) enter "0 ~ 2".
class  Player
  def  hand
    # Display "Sentence that asks the player to enter 0 ~ 2".
    puts " Enter numbers. "
    puts " 0: rock, 1: scissors, 2: paper "
     # Get what the player has entered in the variable "input_hand" and substitute it.
      #Hint! Use the "gets method".
     input_hand = gets.to_i
    # If "input_hand" (acquired value) is either "0, 1, 2", it will escape from while, otherwise it will be repeated from the beginning.
      #Hint! Use "while" and "if".
      # Let's implement according to the example of the following types * Be careful of commenting out when implementing
       while input_hand > 2 or input_hand < 0  do
         puts "Please enter a number between 0 & 2"
          input_hand = gets.to_i
       end
       if input_hand == 0
         puts "you selected rock"
       elsif input_hand == 1
         puts "you selected scissors"
       elsif input_hand == 2
         puts "you selected paper"
       end
       input_hand

        #if Write a condition ("input_hand" (acquired value) is "0, 1, 2" In that case)
          # "input_hand" (acquired value) is returned as it is.
            #Hint! Use "return".
        # else * In cases other than the conditions
          # "Sentences that require the player to enter 0 to 2" are displayed.
          # puts "Please enter the number again."
          # puts "0: Goo, 1: Choki, 2: Par"
          # Get what the player has entered in the variable "input_hand" and substitute it.
        # end if statement end
      # end while statement end
  end
end
# Write the logic that the enemy randomly geneÃŸÃŸrates a value of "0 ~ 2".
class  Enemy
  def  hand
    ran_number =  rand(0..2)
    if ran_number == 0
      puts "The enemy selected rock"
    elsif ran_number == 1
      puts "The enemy selected scissors"
    else
      puts "The enemy selected paper"
    ran_number
  end
end
# Write the logic to play rock-paper-scissors with "0 ~ 2" entered by the player (yourself) and "0 ~ 2" randomly generated by the enemy, and output the result on the console.
class Janken
  def pon (player_hand, enemy_hand)
      #Substitute ["rock", "scissors", "paper"] for the variable "janken".
  # janken = [ " rock " , " scissors " , " paper"]
  difference = player_hand.to_i - enemy_hand.to_i
  result_difference = (difference +3)% 3

  if result_difference == 2
    puts "you won"
  elsif result_difference == 1
    puts "you lost"
  else
    puts "it's a draw"
    player = Player.new
    enemy = Enemy.new
    janken = Janken.new
    next_game = janken.pon(player.hand, enemy.hand)
 end

  #{}   #"The opponent's hand is # {value generated by the enemy}." Is output.
    # puts "The opponent's hand is # {janken [enemy_hand]}." #Create
#    logic to play rock-
  #    paper- scissors from the return value of the Player class and the return value of the Enemy class. # Let's implement according to the example of the following types * Be careful of commenting out when implementing
      #if Write the condition The return value (player_hand) of the Player class and the return value (enemy_hand) of the Enemy class are the same If
      # "Aiko" is output.
      # puts "Aiko"
      # "true" is returned to execute rock-paper-scissors repeatedly.
        #Hint! Use "return".
    # elsif If the combination is as follows
      # (player_hand == 0 && enemy_hand == 1) || (player_hand == 1 && enemy_hand == 2) || (player_hand == 2 &&
  #    enemy_hand == 0) # Output "You win".
  #    End #while Returns "false" to end rock-paper-scissors.
    # else * If the condition is not met,
      # "You are losing" is output.
  #    End #while Returns "false" to end rock-paper-scissors.
  #  # end if statement end
end
end
# Substitute the instantiated Player for the variable "player".
player = Player.new
 # Assign an instantiation of Enemy to the variable "enemy".
enemy = Enemy.new
 # Assign an instantiation of Janken to the variable "janken".
janken = Janken.new
 # Assign "true" to the variable "next_game". * This is because the iterative process is executed forever while while unless "next_game" becomes "false".
# Let's implement according to the example of the type after. * Be careful of commenting out when implementing.
# while next_game
# Substitute the value (return value) returned by executing rock-paper-scissors into the variable "next_game".
  # I'm running rock-paper-scissors with "janken.pon (player.hand, enemy.hand)".
next_game = janken.pon(player.hand, enemy.hand)
  # When "false" is returned in the execution result of rock-paper-scissors, this while is terminated. When "true" is returned, it repeats that number of times.
end
# end while statement end
